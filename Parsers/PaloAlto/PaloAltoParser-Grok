input {
  udp {
  port => 10245
  type => syslog
 }
}
filter {
  grok {
    match => {
      "message" => "<(?<unum>\d+)>%{SYSLOGTIMESTAMP:Timestamp} %{SYSLOGHOST:DeviceName} CEF:%{INT:CEF_Version}\|(?<DeviceVendor>\w.*)\|(?<DeviceProduct>\w+-\w+)\|(?<DeviceVersion>\d+\.\d+\.\d+)\|(?<LogSubType>\b\w+(?:-\w+)?\b)\|%{WORD:LogType}\|%{INT:Severity}\|rt=(?<receipTime>%{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{WORD}) %{GREEDYDATA:extensions}"
    }
    ecs_compatibility => disabled
  }
  date {
    match => ["receipTime", "MMM dd yyyy HH:mm:ss z"]
    target => "ReceiptTime"
    timezone => "GMT"
  }

  ruby {
    code => "
      event.set('ReceiptTime', event.get('ReceiptTime').time.localtime('+08:00').strftime('%Y-%m-%d %H:%M:%S'))
    "
  }
  kv {
    source => "extensions" #split all extensions into field=value pairs
    field_split => ";"
    value_split => "="
    recursive => false
    trim_value => "\""
    allow_empty_values => false
    tag_on_failure => ["parse_error"]
    #removal of fields that are not needed.
    remove_field => ["CEF_Version","deviceExternalId","cn3Label","cs1Label","cs2Label","cs3Label","cs4Label","cs5Label","cs6Label","flexString1Label","flexNumber1Label","cn1Label","cn2Label","message","host","PanOSMonitorTag"]
    remove_field => ["dvchost","PanOSVsysName","PanOSDstUUID","PanOSSrcUUID","cs3","PanOSDGl1","PanOSDGl2","PanOSDGl3","PanOSDGl4","suser","duser", "DeviceVersion","PanOSTunnelID","PanOSParentSessionID","deviceOutboundInterface","PanOSActionFlags","PanOSTunnelType","deviceInboundInterface","receipTime"]
    remove_field => ["unum","@version","[event][original]","event","PanOSParentStartTime","extensions","flexString2Label","type","PanOSContentVer"]  #Removal of default fields added by logstash
  }

  if [LogType]=="TRAFFIC" {
    date {
      match => ["start", "MMM dd yyyy HH:mm:ss z"]
      target => "StartTime"
      timezone => "GMT"
         }

  ruby {
      code => "
      event.set('StartTime', event.get('StartTime').time.localtime('+08:00').strftime('%Y-%m-%d %H:%M:%S'))
    "
       }
    mutate {
      remove_field => ["Timestamp"]
      remove_field => ["start"]
      rename => {
        "src" => "SourceIP"
        "dst" => "DestinationIP"
        "cs1" => "RuleName"
        "app" => "ApplicationProtocol"
        "cs4" => "SourceZone"
        "cs5" => "DestinationZone"
        "cs6" => "LogProfile"
        "cn1" => "SessionID"
        "cnt" => "RepeatCount"
        "spt" => "SourcePort"
        "dpt" => "DestinationPort"
        "flexString1" => "Flags"
        "proto" => "IpProtocol"
        "act" => "DeviceAction"
        "flexNumber1" => "TotalBytes"
        "in" => "SentBytes"
        "out" => "ReceivedBytes"
        "cn2" => "Packets"
        "cn3" => "ElapsedTimeinSeconds"
        "cs2" => "URLCategory"
        "end" => "EndTime"
        "reason" => "SessionEndReason"
        "externalId" => "seqno"
      }
    }
  }
  if [LogType]=="THREAT" {
    mutate {
      remove_field => ["@timestamp"]
      #Renamings for the authentification logs
      rename => {
        "LogSubType" => "ThreatType"
        "src" => "SourceIP"
        "dst" => "DestinationIP"
        "cs1" => "RuleName"
        "app" => "ApplicationProtocol"
        "cs4" => "SourceZone"
        "cs5" => "DestinationZone"
        "cs6" => "LogProfile"
        "cn1" => "SessionID"
        "cnt" => "RepeatCount"
        "spt" => "SourcePort"
        "dpt" => "DestinationPort"
        "flexString1" => "Flags"
        "proto" => "IpProtocol"
        "act" => "DeviceAction"
        "cs2" => "URLCategory"
        "flexString2" => "Direction"
        "cat" => "ThreatName"
        "externalId" => "seqno"
        "request" => "URL"
        "fileId" => "PcapId"
      }
     convert => {
     "Severity" => "integer"
     "SourcePort" => "integer"
     "DestinationPort" => "integer"
     "SessionID" => "integer"
     "PcapId" => "integer"
     "sourceTranslatedPort" => "integer"
     "destinationTranslatedPort" => "integer"
     "RepeatCount" => "integer"
}
    }
  }
}
output {
  if [LogType] == "TRAFFIC" {
        kusto {
          codec => json_lines
          path => "/tmp/adx/%{+YYYY-MM-dd-HH-mm}.txt"
          ingest_url => "https://"
          app_id => "" #no need to change
          app_key => "" #need to change when it expires (value)
          app_tenant => ""
          database => ""
          delete_temp_files => "true"
          table => ""
          json_mapping => ""
        }
     }
  if  [LogType] == "THREAT" {
    microsoft-sentinel-logstash-output-plugin {
      client_app_Id => "" #no need to change
      client_app_secret => "" #need to change when it expires
      tenant_id => ""
      data_collection_endpoint => "https://"
      dcr_immutable_id => ""
      dcr_stream_name => ""
    }
  }
}
