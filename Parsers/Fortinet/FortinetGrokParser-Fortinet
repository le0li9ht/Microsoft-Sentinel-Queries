input {
  tcp {
  port => 10515
  type => syslog
}
}
filter {
grok {
    match => {
      "message" => "<(?<unum>\d+)>%{SYSLOGTIMESTAMP:Timestamp} %{HOSTNAME:DeviceName} CEF: %{INT}\|%{WORD:DeviceVendor}\|%{WORD:DeviceProduct}\|v(?<DeviceVersion>\d+\.\d+\.\d+)\|%{NUMBER}\|%{WORD:LogType}:%{USERNAME:LogSubType} %{USERNAME:DeviceAction1}\|%{NUMBER}\|%{GREEDYDATA:extensions}"
    }
     ecs_compatibility => disabled
  }
mutate {
    gsub => [
    #"extensions", "\s(?=\S+=)", ";"
     "extensions", "\s(?=\b[A-Za-z]+=)", "@@@@%{uuid}"
    ]
  }
kv {
    source => "extensions" #split all extensions into field = value pairs
    field_split_pattern => "@@@@%{uuid}"
    value_split => "="
    recursive => false
    trim_value => "\""
    allow_empty_values => false
    tag_on_failure => ["parse_error"]
    remove_field => ["unum","DeviceVersion","extensions", "event", "message", "host", "@version", "FTNTFGTvd", "FTNTFGTsrcuuid", "FTNTFGTdstuuid", "FTNTFGTincidentserialno","FTNTFGTcountapp","FTNTFGTcountweb","FTNTFGTpolicytype"]
    remove_field => ["FTNTFGTtz", "deviceExternalId", "FTNTFGTsubtype", "FTNTFGTvd", "FTNTFGTpolicyid", "FTNTFGTtrandisp", "FTNTFGTsrcintfrole", "FTNTFGTdstintfrole", "FTNTFGTpoluuid"]
    #removal of fields that are not needed.
}
ruby {
    code => "event.set('FTNTFGTeventtime', event.get('FTNTFGTeventtime').to_i / 1000000000)"
  }
  date {
    match => ["FTNTFGTeventtime", "UNIX"]
    target => "EventTime"
  }
  ruby {
  code => "event.set('EventTime', event.get('EventTime').time.localtime('+08:00').strftime('%Y-%m-%d %H:%M:%S'))"
}
mutate {
    rename => {
      "cat" => "LogCategory"
      "FTNTFGTlevel" => "LogSeverity"
      "src" => "SourceIP"
      "spt" => "SourcePort"
      "dst" => "DestinationIP"
      "dpt" => "DestinationPort"
      "in" => "SentBytes"
      "out" => "ReceivedBytes"
      "act" => "DeviceAction"
      "proto" => "ProtocolID"
      "app" => "Service"
      "externalId" => "SessionID"
      "FTNTFGTapp" => "Application"
      "FTNTFGTappcat" => "AppCategory"
      "FTNTFGTappid" => "ApplicationId"
      "FTNTFGTapprisk" => "ApplicationRisk"
      "FTNTFGTsentpkt" => "SentPackets"
      "FTNTFGTrcvdpkt" => "ReceivedPackets"
      "FTNTFGTpolicyname" => "PolicyName"
      "FTNTFGTduration" => "SessionDuration"
      "FTNTFGTsrccountry" => "SourceCountry"
      "FTNTFGTdstcountry" => "DestinationCountry"
      "FTNTFGTapplist" => "ApplicationProfile"
      "FTNTFGTsentdelta" => "SentDeltaBytes"
      "FTNTFGTlogid" => "MessageID"
      "FTNTFGTrcvddelta" => "ReceiveDeltaBytes"
      "deviceDirection" => "TrafficDirection"
      "dhost" => "DestinationURL"
      "request" => "RequestURL"
      "msg" => "Message"
      "FTNTFGTvpntype" => "VPNType"
      "deviceOutboundInterface" => "OutboundInterface"
      "deviceInboundInterface" => "InboundInterface"
      "FTNTFGTscertcname" => "CertificateCN"
      "FTNTFGTprofile" => "ProfileName"
      "FTNTFGTreqtype" => "RequestType"
      "FTNTFGTerror" => "FortigateError"
      "FTNTFGTeventtype" => "EventType"
      "FTNTFGTscertissuer" => "CertificateIssuer"
      "FTNTFGTmethod" => "Method"
      "FTNTFGTutmaction" => "UTMAction"
      "FTNTFGTcrscore" => "ClientReputationScore"
      "FTNTFGTcraction" => "ClientReputationAction"
      "FTNTFGTcrlevel" => "ClientReputationLevel"
      "FTNTFGTcat" => "WebCategoryID"
      "requestContext" => "RequestContext"
      "c6a2" => "DestinationIP"
      "c6a3" => "SourceIP"
    }
  }
mutate { remove_field => ["FTNTFGTeventtime", "DeviceAction1"] }
}
output {
          kusto {
          codec => json_lines
          path => "/tmp/adx/%{+YYYY-MM-dd-HH-mm}.txt"
          ingest_url => "https://"
          app_id => ""
          app_key => ""
          app_tenant => ""
          database => ""
          table => ""
          json_mapping => "FortinetMapping"
        }

}

